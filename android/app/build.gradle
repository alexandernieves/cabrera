apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

static def versionToNumber(major, minor, patch) {
    return patch * 100 + minor * 10000 + major * 1000000
}

def getRNVersion() {
    def version = providers.exec {
        workingDir(projectDir)
        commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
    }.standardOutput.asText.get().trim()

    def coreVersion = version.split("-")[0]
    def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }

    return versionToNumber(
        major,
        minor,
        patch
    )
}

def rnVersion = getRNVersion()

react {
    // Intenta simplificar la forma en la que se ejecutan los comandos de Node.js
    entryFile = file(execNode(["require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"]))
    reactNativeDir = new File(execNode(["require.resolve('react-native/package.json')"])).getParentFile().getAbsoluteFile()
    hermesCommand = reactNativeDir + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(execNode(["require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"])).getParentFile().getAbsoluteFile()

    cliFile = new File(execNode(["require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"]))
    bundleCommand = "export:embed"

    if (rnVersion >= versionToNumber(0, 75, 0)) {
        autolinkLibrariesWithApp()
    }
}

def execNode(command) {
    return ["node", "--print", command].execute(null, rootDir).text.trim()
}

android {
        namespace 'com.alexcode.org.cabrera' // Asegúrate de que este valor esté definido
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {

        applicationId 'com.alexcode.org.cabrera'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

if (rnVersion < versionToNumber(0, 75, 0)) {
    apply from: new File(execNode(["require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"]), "../native_modules.gradle");
    applyNativeModulesAppBuildGradle(project)
}
